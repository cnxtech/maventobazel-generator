/* 
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license. 
 * For full license text, see LICENSE.txt file in the repo root  or https://opensource.org/licenses/BSD-3-Clause
 */
package com.salesforce.bazel.migration;

import java.io.*;
import java.util.Map;

/**
 * Takes in a list of Dependency objects, and writes out a Bazel WORKSPACE file that has a <i>maven_jar()</i>
 * entry for each dependency. This helps maintain the WORKSPACE file without having to do manual merges.
 * <p>
 * <b>Input</b>
 * <p>
 * A list of {@link MavenDependency} POJOs, typically obtained from parsing a file with the {@link DependenciesParser} class.
 * These file will typically be a concatenation of: <ul>
 * <li>The existing WORKSPACE file
 * <li>The output of a <i>mvn dependency:list</i> command for the Maven project being migrated
 * </ul>
 * The input dependencies should already be 'deduplicated' by the {@link DependencyAnalyzer} class by the {@link DependenciesParser}. 
 * That process looks through the dependency list and picks the 'newer' version of the library if it appears more than once in
 * the list. This helps when migrating a project into the WORKSPACE, as you almost always want to pick the later
 * version of a library under the Single Version Policy of Bazel.
 * <p>
 * <b>Output</b>
 * <p>
 * A file with the the external dependencies written in Bazel WORKSPACE file form, one entry per dependency. For example:
 * <pre>
def external_maven_jars():
 
  native.maven_jar(
    name = "com_fasterxml_jackson_core_jackson_core",
    artifact = "com.fasterxml.jackson.core:jackson-core:2.8.9",
  )

  native.maven_jar(
    name = "com_fasterxml_jackson_core_jackson_databind",
    artifact = "com.fasterxml.jackson.core:jackson-databind:2.8.9",
  )
   </pre>
 * <p>
 */
public class BazelWorkspaceGenerator {

    public void writeDependenciesAsWorkspaceFile(Map<String, MavenDependency> dependencies, File outputFile)  throws Exception {
        BufferedWriter bw = null;
        FileWriter fw = null;

        try {
            fw = new FileWriter(outputFile);
            bw = new BufferedWriter(fw);

            bw.write("# Generated by the Maven to Bazel migration tool\n");
            bw.write("#  See the migration tool README for the 'load' snippet to insert into your WORKSPACE file to execute this file\n\n");
            bw.write("def external_maven_jars():\n\n");
            
            for (MavenDependency dep : dependencies.values()) {
                bw.write(constructMavenJarEntry(dep));
            }

            System.out.println("Wrote Bazel Workspace file "+outputFile.getAbsolutePath());
        } finally {
            if (bw != null) bw.close();
            if (fw != null) fw.close();
        }
    }

    String constructMavenJarEntry(MavenDependency dep) {
    	StringBuilder sb = new StringBuilder();
        sb.append("  native.maven_jar(\n    name = \"");
        sb.append(BazelNamer.computeBazelName(dep));
        sb.append("\",\n    artifact = \"");
        sb.append(BazelNamer.computeBazelMavenName(dep));
        sb.append("\",\n  )\n\n");
        return sb.toString();
    }
    
}
