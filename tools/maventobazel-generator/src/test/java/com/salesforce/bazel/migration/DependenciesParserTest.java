/* 
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license. 
 * For full license text, see LICENSE.txt file in the repo root  or https://opensource.org/licenses/BSD-3-Clause
 */
package com.salesforce.bazel.migration;

import static org.junit.Assert.assertEquals;

import java.util.ArrayList;
import java.util.List;

import org.junit.Test;

import com.salesforce.bazel.migration.MavenDependency.Scope;

public class DependenciesParserTest {

    @Test
    public void testParseMavenOutput() throws Exception {
        DependenciesParser parser = new DependenciesParser(null);
        
        List<String> rawLines = new ArrayList<>();
        rawLines.add("some kind of header line"); // IGNORE
        rawLines.add(""); // IGNORE
        rawLines.add("[INFO] --- maven-dependency-plugin:2.10:list (default-cli) @ my-service ---"); // IGNORE
        rawLines.add("[INFO] The following files have been resolved:"); // IGNORE
        rawLines.add("[INFO]    com.twitter:finagle-http_2.11:jar:6.43.0:compile"); // compile scope
        rawLines.add("[INFO]    com.fasterxml.jackson.module:jackson-abc:jar:2.8.9:runtime"); // runtime scope
        rawLines.add("[INFO]    org.springframework:spring-jdbc:jar:4.3.10.RELEASE:compile"); // RELEASE token in version
        rawLines.add("[INFO]    org.glassfish.hk2.external:asm:jar:2.5.0-b32:provided"); // provided scope
        rawLines.add("[INFO]    junit:junit:jar:4.12:test");  // test scope
        rawLines.add("[INFO]    org.glassfish.hk2.external:asm:jar:2.5.0.32:provided");  // fourth hotfix number in version
        rawLines.add("[INFO]    com.foo.bar:somelib:jar:idl:2.0.0:compile");   // classifer 'idl' adds an extra token
        rawLines.add("[INFO]    io.netty:netty-transport-native-epoll:jar:linux-x86_64:4.1.8.Final:compile");
        rawLines.add("[INFO] Finished at: 2017-10-19T10:39:26-06:00"); // IGNORE
        rawLines.add("[INFO] This : non-dependency line : of : text : has : colons"); // IGNORE, PARSE ERROR
        
        List<MavenDependency> deps = parser.parseFileLines(rawLines);
        
        assertEquals(8, deps.size());
        assertDependency(deps.get(0), "com.twitter", "finagle-http_2.11", Scope.COMPILE, new MavenDependencyVersion("6.43.0"));
        assertDependency(deps.get(1), "com.fasterxml.jackson.module", "jackson-abc", Scope.RUNTIME, new MavenDependencyVersion("2.8.9"));
        assertDependency(deps.get(2), "org.springframework", "spring-jdbc", Scope.COMPILE, new MavenDependencyVersion("4.3.10.RELEASE"));
        assertDependency(deps.get(3), "org.glassfish.hk2.external", "asm", Scope.PROVIDED, new MavenDependencyVersion("2.5.0-b32"));
        assertDependency(deps.get(4), "junit", "junit", Scope.TEST, new MavenDependencyVersion("4.12"));
        assertDependency(deps.get(5), "org.glassfish.hk2.external", "asm", Scope.PROVIDED, new MavenDependencyVersion("2.5.0.32"));
        assertDependency(deps.get(6), "com.foo.bar", "somelib", Scope.COMPILE, new MavenDependencyVersion("2.0.0"), "idl");
        assertDependency(deps.get(7), "io.netty", "netty-transport-native-epoll", Scope.COMPILE, new MavenDependencyVersion("4.1.8.Final"), "linux-x86_64");
        
        // parser has metrics to tell us what it ignored, verify that matches our expectations with this test data
        assertEquals(6, parser.ignoredLineCount);
        assertEquals(1, parser.parseErrorLineCount);
        
    }
    
    @Test
    public void testParseBazelWorkspace() throws Exception {
        DependenciesParser parser = new DependenciesParser(null);
        
        List<String> rawLines = new ArrayList<>();
        rawLines.add("# Generated by the Maven to Bazel migration tool"); // IGNORE
        rawLines.add(""); // IGNORE
        rawLines.add("def external_maven_jars():"); // IGNORE
        
        rawLines.add("native.maven_jar("); // IGNORE
        rawLines.add("  name = \"org_aopalliance_aopalliance\","); // IGNORE
        rawLines.add("  artifact = \"org.aopalliance:aopalliance:1.0\","); // compile scope
        rawLines.add(")"); // IGNORE

        rawLines.add("native.maven_jar("); // IGNORE
        rawLines.add("  name = \"io_netty_netty_transport_native_epoll_linux_x86_64\","); // IGNORE
        rawLines.add("  artifact = \"io.netty:netty-transport-native-epoll:jar:linux-x86_64:4.1.8.Final\","); // compile scope
        rawLines.add(")"); // IGNORE

        List<MavenDependency> deps = parser.parseFileLines(rawLines);
        
        assertEquals(2, deps.size());
        assertDependency(deps.get(0), "org.aopalliance", "aopalliance", Scope.COMPILE, new MavenDependencyVersion("1.0"));
        assertDependency(deps.get(1), "io.netty", "netty-transport-native-epoll", Scope.COMPILE, new MavenDependencyVersion("4.1.8.Final"), "linux-x86_64");
        
        // parser has metrics to tell us what it ignored, verify that matches our expectations with this test data
        assertEquals(9, parser.ignoredLineCount);
        assertEquals(0, parser.parseErrorLineCount);
    }
    
    
    
    // HELPERS
    
    private void assertDependency(MavenDependency dep, String groupId, String artifactId, MavenDependency.Scope scope, MavenDependencyVersion version) {
        assertEquals(groupId, dep.groupId);
        assertEquals(artifactId, dep.artifactId);
        assertEquals(scope, dep.scope);
        assertEquals(version.label, dep.version.label);
    }

    private void assertDependency(MavenDependency dep, String groupId, String artifactId, MavenDependency.Scope scope, MavenDependencyVersion version, String classifier) {
        assertEquals(groupId, dep.groupId);
        assertEquals(artifactId, dep.artifactId);
        assertEquals(scope, dep.scope);
        assertEquals(version.label, dep.version.label);
        assertEquals(classifier, dep.classifier);
    }
}
